"""
Задание 1.
Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее)!
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение.
Обязательно сделайте замеры времени обеих реализаций и дайте ответ помогла ли
доработка и в каких случаях она будет эффективной.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
"""

from random import randint
from timeit import timeit

my_list = [randint(-100, 100) for _ in range(100)]

def bubble_sort_1(lst_obj):
    n = 1
    while n < len(lst_obj):
        for i in range(len(lst_obj)-n):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
        n += 1
    return lst_obj


print(my_list)
print(bubble_sort_1(my_list[:]))

my_list_10 = [randint(-100, 100) for _ in range(10)]

print(timeit('bubble_sort_1(my_list_10[:])', globals=globals(), number=1000))

my_list_100 = [randint(-100, 100) for _ in range(100)]

print(timeit('bubble_sort_1(my_list_100[:])', globals=globals(), number=1000))


def bubble_sort_2(lst_obj):
    flag = False
    while flag:
        flag = True
        for i in range(len(lst_obj)-1):
            if lst_obj[i] < lst_obj[i+1]:
                lst_obj[i], lst_obj[i+1] = lst_obj[i+1], lst_obj[i]
                flag = False
    return lst_obj


my_list_10 = [randint(-100, 100) for _ in range(10)]

print(timeit('bubble_sort_2(my_list_10[:])', globals=globals(), number=1000))

my_list_100 = [randint(-100, 100) for _ in range(100)]

print(timeit('bubble_sort_2(my_list_100[:])', globals=globals(), number=1000))

"""
bubble_sort_1
0.02316080000000001
1.8337632000000001

bubble_sort_2
0.00043359999999958987
0.001737400000000111

Вариант с доработкай работает лучше.
Чем меньше массив, тем больше вероятность, что он отсортирован.
Значит дороботка поможет.

"""
