"""
Урок 4.
Задание 1.
Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива
Сделайте замеры времени выполнения кода с помощью модуля timeit
Попробуйте оптимизировать код, чтобы снизить время выполнения
Проведите повторные замеры
ОБЯЗАТЕЛЬНО! Добавьте аналитику: что вы сделали и какой это принесло эффект

Мы заменили append на списковое включение.
Во второй функции мы не создаем второй список.
Код стал локоничнее и быстрее работает по времени.

from timeit import timeit


number_list = [1, 2, 5, 77, 88, 12]


def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr


def func_2(nums):
    return [i for i, el in enumerate(nums) if el % 2 == 0]


print(timeit("func_1(number_list)", globals=globals()))
print(timeit("func_2(number_list)", globals=globals()))
"""

from memory_profiler import memory_usage


def decor(func):
    def wrapper(*args, **kwargs):
        m1 = memory_usage()
        res = func(args[0])
        m2 = memory_usage()
        mem_diff = m2[0] - m1[0]
        return res, mem_diff
    return wrapper


number_list = [1, 2, 5, 77, 88, 12]


@decor
def func_2(nums):
    return [i for i, el in enumerate(nums) if el % 2 == 0]


if __name__ == '__main__':
    res, mem_diff = func_2(number_list)
    print(f'list comprehension: {mem_diff} Mib')


@decor
def func_3(nums):
    return tuple(i for i, el in enumerate(nums) if el % 2 == 0)


if __name__ == '__main__':
    res, mem_diff = func_3(number_list)
    print(f'tuple: {mem_diff} Mib')


"""
Оптимизация задачи произведенна за счет замены list comprehension на tuple.
list comprehension: 0.00390625 Mib
tuple: 0.0 Mib
Выполнение задачи происходит с меньшим количеством задействованной памяти,
при использовании tuple.
tuple коллекции, не являющиеся хеш-таблицами и не требующие выделения дополнительной памяти, поэтому они более экономичны.
"""
